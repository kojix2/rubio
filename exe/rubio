#!/usr/bin/env ruby
# frozen_string_literal: true

require 'puts_debuggerer' if ENV['PD'].to_s.downcase == 'true'
require 'rubio'
require 'optparse'

options = { backend: 'vlc -I rc' }

opt = OptionParser.new
opt.summary_width = 23
opt.on('--vlc [STR]', 'use VLC interface STR on the backend [rc]') do |i|
  i ||= 'rc'
  options[:backend] = "vlc -I #{i}"
end
opt.on('--mpg123', 'use mpg123 on the backend') { options[:backend] = 'mpg123' }
opt.on('-b', '--backend STR', String, 'command to use as backend player [\'vlc -I rc\']') do |b|
  options[:backend] = b
end
opt.on('-c', '--count INT', Numeric, 'number of stations to fetch from radio-browser or -1 to fetch them all [-1]') do |c|
  options[:radio_station_count] = c
end
opt.on('--per-page INT', Numeric, 'number of stations per page [20]') { |c| options[:table_per_page] = c }
opt.on('-w', '--width INT', Numeric, 'main window width') { |w| options[:initial_width] = w }
opt.on('-h', '--height INT', Numeric, 'main window height') { |h| options[:initial_height] = h }
opt.on('--[no-]page-count', TrueClass, 'show/hide page count [false]') { |b| options[:show_page_count] = b }
opt.on('--[no-]menu', TrueClass, 'show/hide menu [true]') { |b| options[:show_menu] = b }
opt.on('--[no-]bookmarks', TrueClass, 'show/hide bookmarks [true]') { |b| options[:show_bookmarks] = b }
opt.on('--[no-]gradual', TrueClass, 'gradually/non-gradually fetch stations [true]') { |g| options[:gradually_fetch_stations] = g }
opt.on('--[no-]margins', TrueClass, 'show/hide margins [true]') { |m| options[:show_margins] = m }
opt.on('--[no-]info', TrueClass, 'show/hide currently playing (song) info when using \'vlc -I rc\' backend only [true]') { |i| options[:show_currently_playing] = i }
opt.on('--debug', 'output status of monitored threads') { options[:debug] = true }
opt.on('--help', 'show this help message') do
  puts opt
  exit
end
opt.on('--version', 'show the rubio version number') do
  puts Rubio::VERSION
  exit
end

begin
  opt.parse!(ARGV)
rescue OptionParser::InvalidOption, OptionParser::AmbiguousOption => e
  puts e.message
  puts opt
  exit
end

begin
  Rubio::View::Radio.launch(**options)
rescue StandardError => e
  Rubio::View::Radio.launched_application&.presenter&.player&.stop_all
  raise e
end
